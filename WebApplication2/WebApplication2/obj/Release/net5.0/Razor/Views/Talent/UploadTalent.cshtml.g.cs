#pragma checksum "C:\Users\jakcy\OneDrive\Desktop\WebApplication2\WebApplication2\Views\Talent\UploadTalent.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "3431482ad3284767ca4130d478006a34a682e9e3"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Talent_UploadTalent), @"mvc.1.0.view", @"/Views/Talent/UploadTalent.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\jakcy\OneDrive\Desktop\WebApplication2\WebApplication2\Views\_ViewImports.cshtml"
using WebApplication2;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\jakcy\OneDrive\Desktop\WebApplication2\WebApplication2\Views\_ViewImports.cshtml"
using WebApplication2.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"3431482ad3284767ca4130d478006a34a682e9e3", @"/Views/Talent/UploadTalent.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"6b36aee4455a440795f240a74431c307640c545e", @"/Views/_ViewImports.cshtml")]
    public class Views_Talent_UploadTalent : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("<div class=\"jumbotron\">\r\n    <h1>Task 7</h1>\r\n</div>\r\n<input type=\"file\" id=\"inputFile\" name=\"filename\">\r\n<div class=\"image-preview\" id=\"imagePreview\">\r\n    <img");
            BeginWriteAttribute("src", " src=\"", 161, "\"", 167, 0);
            EndWriteAttribute();
            WriteLiteral(@" alt=""Image Preview"" class=""image-preview__image"" />
</div>
<br />
<br />
<input type=""button"" class=""btn btn-primary"" value=""Tag Image"" id=""tagButton"" />
<div class=""row"">
    <div id=""outputTagData""></div>
</div>
<br />
<br />
<br />
<br />
<div class=""row"">
    <div id=""outputData""></div>
</div>

");
            DefineSection("scripts", async() => {
                WriteLiteral(@"
    <script src=""https://sdk.amazonaws.com/js/aws-sdk-2.1.24.min.js""></script>

    <script>
        jQuery('#tagButton').on('click', function () {
            $('#outputData').empty();
            loadData();
            function loadData() {
                $.ajax({
                    method:
                        'POST',
                    url: `/ImageRecognition/ImageRecognition?fileName=${fileNameFirst}&fileExtension=${fileNameSecond}`,
                    dataType: 'json',
                    async: true,
                    cache: false,
                }).done(function (data) {
                    console.log(data);
                    if (data == false) {
                        alert(""Not a human!"");
                    } else {
                        AWS.config.update({
                            accessKeyId: 'AKIAJXVTE2D2B6ZKE3AA',
                            secretAccessKey: '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',
                            sessionToken: ''
   ");
                WriteLiteral(@"                     });
                        AWS.config.region = 'us-east-1';
                            var s3 = new AWS.S3({
                                params: { Bucket: 'cscasgn-task-5' }
                            });
                            var file = document.getElementById('inputFile').files[0];
                            if (file) {
                                s3.putObject({
                                    Key: file.name,
                                    ContentType: file.type,
                                    Body: file,
                                    ACL: ""public-read""
                                },
                                    function (err, data) {
                                        if (data !== null) {
                                            alert(""Got it!"");
                                        }
                                        else {
                                            alert(""Upload failed!"");
         ");
                WriteLiteral(@"                               }
                                    });
                            }
                        

                        alert(""A human!"");

                    }
                    var displayData = document.getElementById(""outputTagData"");
                    displayData.append(data);
                }).fail(function (jqXHR) {
                    if (parseInt(jqXHR.status) === 400) {
                        window.alert(""Error, please try again"")
                    }
                });//End of ajax().done()//End of ajax().done()
            }//End of loadData
        })

        const inputFile = document.getElementById('inputFile');
        const previewElement = document.getElementById('imagePreview');
        const previewImage = previewElement.querySelector("".image-preview__image"")
        var fileNameFirst = """";
        var fileNameSecond = """";

        inputFile.addEventListener(""change"", function () {
            const file = this.files[0];");
                WriteLiteral(@"

            if (file) {
                const reader = new FileReader();

                reader.addEventListener(""load"", function () {
                    console.log(this);
                    previewImage.setAttribute(""src"", this.result);
                });
                reader.readAsDataURL(file);
                var fullFileName = inputFile.value.split(""\\"").pop();
                fileNameFirst = fullFileName.substr(0, fullFileName.lastIndexOf("".""));
                fileNameSecond = fullFileName.split(""."").pop();
                console.log(fullFileName);
                console.log(fileNameFirst);
                console.log(fileNameSecond);
            } else {
                window.alert(""Invalid image file uploaded"");
            }
        });
    </script>
");
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
